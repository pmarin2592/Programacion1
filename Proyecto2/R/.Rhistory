#Edad es mayor a 40
library(dplyr) #Libreria que nos ayudara hacer la filtración
mi_dataframe %>%
filter(Edad > 40) #Se busca en el dataset las personas mayores de 40 años
df_filtro <- df[df$Edad > 40,]
print(df_filtro)
df <- data.frame(
"Altura"= sample(150:200,10,replace=F),
"Peso" = sample(50:100,10,replace=F),
"Edad" = sample(20:60,10,replace=F)
)
df_filtro <- df[df$Edad > 40,]
print(df_filtro)
#Parte 7: Creación de Funciones Personalizadas
operaciones_basicas<-function(x,y){ #Creacion de la funcion la cual realizara 4 operaciones basica sumar,resta,multiplicar y dividir
result_sumO<-x + y                #Las operaciones se realizan con respecto a los parametros que recibe en este caso serian 2 numeros a evaluar<
result_restO<-x - y
result_multO<-x * y
result_divO<- x / y
resultadosO<-list(Suma = result_sumO,Resta = result_restO,Multiplicación = result_multO,División = result_divO)
print(resultadosO)
}
operaciones_basicas(8,4)
primer_num <- 8
segundo_num <- 4
operaciones_basicas <- function(primer_num, segundo_num) {
cat("La suma de ", primer_num , "y", segundo_num, "es:" , (primer_num + segundo_num),'\n')
cat("La suma de ", primer_num , "y", segundo_num, "es:" , (primer_num - segundo_num),'\n')
cat("La suma de ", primer_num , "y", segundo_num, "es:" , (primer_num * segundo_num),'\n')
cat("La suma de ", primer_num , "y", segundo_num, "es:" , (primer_num / segundo_num),'\n')
}
operaciones_basicas(primer_num, segundo_num)
#Promedio de las columnas altura y peso
mean_sapply<-sapply(mi_dataframe[c("Altura","Peso")], mean) #**************************
mean_sapply
#Promedio de las columnas altura y peso
mean_sapply<-sapply(mi_dataframe[c("Altura","Peso")], mean)
cat("El promedio para la Altura es:", mean_sapply["Altura"],
"\nY el promedio para el Peso es:", mean_sapply["Peso"])
#Parte 1: Variables y Tipos de Datos
#Declaración de Variables:
entero<-20 #Un número entero llamado entero
decimal<-12.5 #Un número decimal llamado decimal
mensaje<-'Hola mundo' #Un texto llamado mensaje
es_verdadero<-TRUE #Un valor lógico llamado es_verdadero
#Operaciones con Variables:
sum<-entero + decimal #Operación para obtener la suma de la variable "entero" mas la variable "decimal"
cat('El resultado de la suma es:',sum)
#Parte 1: Variables y Tipos de Datos
#Declaración de Variables:
entero<-20 #Un número entero llamado entero
decimal<-12.5 #Un número decimal llamado decimal
mensaje<-'Hola mundo' #Un texto llamado mensaje
es_verdadero<-TRUE #Un valor lógico llamado es_verdadero
#Operaciones con Variables:
sum<-entero + decimal #Operación para obtener la suma de la variable "entero" mas la variable "decimal"
cat('El resultado de la suma es:',sum)
total_trim<-list(prim_trim,segun_trim,terc_trim,cuart_trim)
#Creacion de Matriz
my_vector<-cbind(ventas_mensuales,costos_mensuales)
matriz_ventas_costos <-matrix(my_vector,nrow = 2,ncol = 12,byrow = TRUE)
ventas_mensuales<-c(120, 150, 180, 170, 160, 190, 200, 210, 220, 180, 150, 130)
#Calculando el promedio del vector
prod_ventas<-mean(ventas_mensuales)
cat('El promedio de las ventas mensuales es de:', prod_ventas)
#Suma total de las ventas del vector
sum_ventas<-sum(ventas_mensuales)
cat('La suma total de las ventas en el año es de:', sum_ventas)
# Meses que tuvieron ventas superiores a 170 unidades
Ventas_sup<-ventas_mensuales[ventas_mensuales > 170]
cant_ventas_sup<-length(Ventas_sup)
cat('La cantidad de meses con ventas superiores a 170 son:', cant_ventas_sup)
#Creacion de un segundo vector
costos_mensuales<-c(50, 60,70, 65, 60, 70, 80, 85, 90, 75, 65, 60)
#Beneficios
beneficio_mensual<-ventas_mensuales - costos_mensuales
#Mes mayor beneficio
max_beneficio<-max(beneficio_mensual)
cat('Mayor beneficio fue de:',max_beneficio)
#Menor beneficio
min_beneficio<-min(beneficio_mensual)
cat('Menor beneficio:', min_beneficio)
#Creacion de Matriz
my_vector<-cbind(ventas_mensuales,costos_mensuales)
matriz_ventas_costos <-matrix(my_vector,nrow = 2,ncol = 12,byrow = TRUE)
prim_trim<-c(sum(matriz_ventas_costos[1,1:3]) , sum(matriz_ventas_costos[2,1:3]))
segun_trim<-c(sum(matriz_ventas_costos[1,4:6]) , sum(matriz_ventas_costos[2,4:6]))
terc_trim<-c(sum(matriz_ventas_costos[1,7:9]) , sum(matriz_ventas_costos[2,7:9]))
cuart_trim<-c(sum(matriz_ventas_costos[1,10:12]) , sum(matriz_ventas_costos[2,10:12]))
total_trim<-list(prim_trim,segun_trim,terc_trim,cuart_trim)
#La transpuesta de la matriz.
transp_matriz<-t(matriz_ventas_costos)
total_trim
beneficio_mensual
#Parte 3: Creación de Funciones y Ciclos
for (i in 1:4) {
if (total_trim[[i]][1] > total_trim[[i]][2]) {
resultados_trimestres[[i]] <- paste("Trimestre", i, ": Ventas superaron los costos")
} else {
resultados_trimestres[[i]] <- paste("Trimestre", i, ": Costos superaron o igualaron las ventas")
}
}
#Parte 3: Creación de Funciones y Ciclos
resultados_trimestres <- list()
for (i in 1:4) {
if (total_trim[[i]][1] > total_trim[[i]][2]) {
resultados_trimestres[[i]] <- paste("Trimestre", i, ": Ventas superaron los costos")
} else {
resultados_trimestres[[i]] <- paste("Trimestre", i, ": Costos superaron o igualaron las ventas")
}
}
resultados_trimestres
total_trim
#Parte 3: Creación de Funciones y Ciclos
result_trimestres <- list()
for (i in 1:4) {
if (total_trim[[i]][1] > total_trim[[i]][2]) {
result_trimestres[[i]] <- paste("Trimestre", i, ": Ventas superaron los costos")
} else {
result_trimestres[[i]] <- paste("Trimestre", i, ": Costos superaron las ventas")
}
}
result_trimestres <- list()
print(result_trimestres)
result_trimestres
#Parte 3: Creación de Funciones y Ciclos
for (i in 1:4) {
if (total_trim[[i]][1] > total_trim[[i]][2]) {
result_trimestres[[i]] <- paste("Trimestre", i, ": Ventas superaron los costos")
} else {
result_trimestres[[i]] <- paste("Trimestre", i, ": Costos superaron las ventas")
}
}
result_trimestres <- list()
result_trimestres
#Parte 3: Creación de Funciones y Ciclos
for (i in 1:4) {
if (total_trim[[i]][1] > total_trim[[i]][2]) {
result_trimestres[[i]] <- paste("Trimestre", i, ": Ventas superaron los costos")
} else {
result_trimestres[[i]] <- paste("Trimestre", i, ": Costos superaron las ventas")
}
}
result_trimestres <- list()
result_trimestres <- list()
#Parte 3: Creación de Funciones y Ciclos
for (i in 1:4) {
if (total_trim[[i]][1] > total_trim[[i]][2]) {
result_trimestres[[i]] <- paste("Trimestre", i, ": Ventas superaron los costos")
} else {
result_trimestres[[i]] <- paste("Trimestre", i, ": Costos superaron las ventas")
}
}
result_trimestres
print(result_trimestres)
beneficio_mensual
#Parte 3: Creación de Funciones y Ciclos
analizar_mes<-function(x){
if(beneficio_mensual > 0){
print('Beneficio positivo')
}else{
print('Beneficio negativo')
}
}
beneficio_mensual
result_benef<-c()
for(i in 1:beneficio_mensual){
result_benef[i]<-analizar_mes(beneficio_mensual[i])
}
#Parte 3: Creación de Funciones y Ciclos
analizar_mes<-function(x){
if(beneficio_mensual > 0){
print('Beneficio positivo')
}else{
print('Beneficio negativo')
}
}
for(i in 1:beneficio_mensual){
result_benef[i]<-analizar_mes(beneficio_mensual[i])
}
result_benef <- vector("character", length(beneficio_mensual))
# Aplicar la función analizar_mes a cada mes usando un ciclo for
for (i in 1:length(beneficio_mensual)) {
result_benef[i] <- analizar_mes(beneficio_mensual[i])
}
result_benef <- vector("character", length(beneficio_mensual))
# Aplicar la función analizar_mes a cada mes usando un ciclo for
for (i in 1:length(beneficio_mensual)) {
result_benef[i] <- analizar_mes(beneficio_mensual[i])
}
#Parte 3: Creación de Funciones y Ciclos
analizar_mes<-function(x){
if(x > 0){
print('Beneficio positivo')
}else{
print('Beneficio negativo')
}
}
result_benef <- vector("character", length(beneficio_mensual))
# Aplicar la función analizar_mes a cada mes usando un ciclo for
for (i in 1:length(beneficio_mensual)) {
result_benef[i] <- analizar_mes(beneficio_mensual[i])
}
beneficio_mensual
beneficio_mensual[11]
beneficio_mensual[10:12]
#Prediccion del beneficio
predecir_beneficio<-function(x){
media_beneficios <- mean(x)
}
result_meanBenef<-function(beneficio_mensual)
result_meanBenef
result_meanBenef
#Prediccion del beneficio
predecir_beneficio<-function(x){
return(media_beneficios <- mean(x))
}
result_meanBenef<-function(beneficio_mensual)
result_meanBenef
result_meanBenef
#Prediccion del beneficio
predecir_beneficio<-function(x){
media_beneficios <- mean(x)
return(media_beneficios)
}
result_meanBenef<-function(beneficio_mensual)
result_meanBenef
result_meanBenef
#Prediccion del beneficio
predecir_beneficio <- function(x) {
media_beneficios <- mean(x)
if (media_beneficios > 0) {
return('Buen trimestre')
} else {
return('Mal trimestre')
}
}
predecir_beneficio(beneficio_mensual[10:12])
#Parte 4
library(ggplot2)
barplot(height = ventas_mensuales, col = "skyblue",
main = "Ventas Mensuales", xlab = "Meses", ylab = "Ventas")
# gráfico de línea para mostrar el beneficio mensual a lo largo del año.
plot(beneficio_mensual, type = "o", col = "blue",
main = "Beneficio Mensual", xlab = "Meses", ylab = "Beneficio")
# Aplicacion de la función analizar_mes a cada mes usando un ciclo for
result_benef <- vector("character", length(beneficio_mensual))
for (i in 1:length(beneficio_mensual)) {
result_benef[i] <- analizar_mes(beneficio_mensual[i])
}
install.packages("installr")
library(installr)
updateR()
version
version
install.packages("installr")
library(installr)
updateR()
version
version
# Comparaciones
cat("¿Es", x, "igual a", y, "?", x == y, "\n")
# Declaración de variables
x <- 15
y <- 10
# Comparaciones
cat("¿Es", x, "igual a", y, "?", x == y, "\n")
cat("¿Es", x, "diferente de", y, "?", x != y, "\n")
# Declaración de variables
p <- TRUE
q <- FALSE
# Operadores Lógicos
cat("Operador AND (p & q):", p & q, "\n")  # AND: TRUE si ambas condiciones son verdaderas
cat("Operador OR (p | q):", p | q, "\n")   # OR: TRUE si al menos una condición es verdadera
cat("Operador NOT (!p):", !p, "\n")        # NOT: Invierte el valor lógico
cat("Operador NOT (!q):", !q, "\n")        # NOT: Invierte el valor lógico
# Definimos el límite hasta el cual iteraremos
limite <- 20
# Inicializamos una variable para la suma acumulada
suma_acumulada <- 0
# Definimos el límite hasta el cual iteraremos
limite <- 20
# Inicializamos una variable para la suma acumulada
suma_acumulada <- 0
# 1. Ciclo for para encontrar números pares entre 1 y 'limite'
for (i in 1:limite) {
if (i %% 2 == 0) {  # Condición para verificar si el número es par
cat(i, "es un número par\n")  # Imprimimos el número par
}
}
# 3. Ciclo while para sumar números pares hasta que la suma acumulada sea mayor a 50
while (suma_acumulada <= 50) {
if (contador %% 2 == 0) {  # Condición para verificar si el número es par
suma_acumulada <- suma_acumulada + contador
cat("Número par:", contador, "- Suma acumulada:", suma_acumulada, "\n")
}
contador <- contador + 1  # Incrementamos el contador
}
# 2. Inicializamos una variable para el contador en el ciclo while
contador <- 1
# 3. Ciclo while para sumar números pares hasta que la suma acumulada sea mayor a 50
while (suma_acumulada <= 50) {
if (contador %% 2 == 0) {  # Condición para verificar si el número es par
suma_acumulada <- suma_acumulada + contador
cat("Número par:", contador, "- Suma acumulada:", suma_acumulada, "\n")
}
contador <- contador + 1  # Incrementamos el contador
}
library(dplyr)
glimpse(county)
library(gapminder)
library(openintro)
library(dplyr)
library(ggplot2)
data("county")
glimpse(county)
#Analisis de la variable state
county2 <- county%>%
group_by(state)%>%
count()
#Eliminar la informacion del estado Alabama
county_noAlabama <- county %>%
filter(state != "Alabama") %>%
droplevels()
county_noAlabama
---
title: "Hola mundo"
---
title: "Hola mundo"
---
title: "Hola mundo"
library(rmarkdown)
---
title: "Holaaa Mundo"
tinytex::install_tinytex()
datos <- c(3, 10, 2, 8, 7)
#Recorrido o amplitud
xmax<- max(datos)
xmax
xmin<-min(datos)
xmin
recorrido<-xmax - xmin
recorrido
abs(datos)
#Desviacion de media
length(datos)
desviación<-datos - media_datos / n
#Desviacion de media
n<-length(datos)
media_datos<-mean(datos)
desviación<-datos - media_datos / n
desviación
desviación<-abs(datos - media_datos) / n
desviación
desviacion_media <- mean(abs(datos - media))
desviacion_media <- mean(abs(datos - media_datos))
desviacion_media
n <- length(datos)
# Paso 2: Calcular la media de los datos
media_datos <- mean(datos)
# Paso 3: Calcular las desviaciones absolutas respecto a la media
desviaciones <- abs(datos - media_datos)
# Paso 4: Sumar las desviaciones
suma_desviaciones <- sum(desviaciones)
# Paso 5: Calcular la desviación media (promedio de las desviaciones)
desviacion_media <- suma_desviaciones / n
# Imprimir el resultado
desviacion_media
#Desviacion estandar
estandar_datos<-sd(datos)
estandar_datos
#Varianza
varianza_datos<-var(datos)
varianza_datos
#Coeficiente de variació
coef_datos<-(estandar_datos / media_datos) * 100
coef_datos
setwd("D:/Pruebas")
library(readr)
bike <- read_csv("BikeData.csv")
View(bike)
#7. Indique cual es el resultado de la siguiente instrucción?test <- bikeData[,7]
#El resultado es el de las columnas de la 'distance'
test <- bikeData[,7]
test02<-bike[,2]
test02
test02<-bike[,7]
test02
#Cree nuevo dataframe con todos los valores de distancias
distancias<-bike[,7]
distancias
#Un vector con todos los valores de distancias
vector_distancia<-c(distancias)
vector_distancia
bike$employed
bike$time
#8. Crear un Dataframe con todos los ciclistas que estan empleados
bike_empleados<-bike[bikeData$employed==1,]
#8. Crear un Dataframe con todos los ciclistas que estan empleados
bike_empleados<-bike[bike$employed==1,]
bike_empleados
View(bike_empleados)
#a.Crear un vector con las distancias de los ciclistas empleados
bike_distancias_emple<-c(bike_empleados$distance)
bike_distancias_emple
test02<-bike[2,7]
test02
library(readr)
library(dplyr)
setwd("D:/Dataset_fifa/OneDrive_3_27-10-2024")
fdata_21 <- read_csv("players_21.csv", col_names = TRUE)
fdata_21 <- read_csv("players_21.csv", col_names = TRUE)
setwd("D:/Proyecto_Progra/Programacion1/Proyecto2")
fdata_21 <- read_csv("players_21.csv", col_names = TRUE)
library(readr)
fdata_21 <- read_csv("players_21.csv", col_names = TRUE)
fdata_21 <- read_csv("D:\Proyecto_Progra\Programacion1", col_names = TRUE)
fdata_21 <- read_csv("D:\Proyecto_Progra\Programacion1")
fdata_21 <- read_csv("D:\Proyecto_Progra\Programacion1")
fdata_22<-read_csv("players_22.csv")
fdata_22<-read_csv("players_22.csv", col_names = TRUE)
fdata_21 <- read_csv("D:\Dataset_fifa\OneDrive_3_27-10-2024")
fdata_21 <- read_csv("D:\Dataset_fifa\OneDrive_3_27-10-2024\players_21.csv")
fdata_21 <- read_csv("players_21.csv", col_names = TRUE)
setwd("D:/Proyecto_Progra/Programacion1/Proyecto2/Data")
fdata_21 <- read_csv("players_21.csv", col_names = TRUE)
setwd("D:/Dataset_fifa/OneDrive_3_27-10-2024")
fdata_21 <- read_csv("players_21.csv", col_names = TRUE)
fdata_21 <- read_csv("players_21.csv", col_names = TRUE)
setwd("D:/Proyecto_Progra/Programacion1/Proyecto2/R/Data")
fdata_21 <- read_csv("players_21.csv", col_names = TRUE)
setwd("D:/")
fdata_21 <- read_csv("players_21.csv", col_names = TRUE)
fdata_21 <- read_csv("players_21.csv", col_names = TRUE)
setwd("D:/Proyecto_Progra/Programacion1/Proyecto2/R/OneDrive_3_27-10-2024")
fdata_21 <- read_csv("players_21.csv", col_names = TRUE)
setwd("D:/Dataset_fifa/OneDrive_3_27-10-2024")
library(readr)
mi_data <- read_csv("players_21.csv", col_names = TRUE)
mi_data02<-read_csv("players_22.csv", col_names = TRUE)
library(readr)
players_21 <- read_csv("players_21.csv")
View(players_21)
fdata_21 <- read_csv("players_21.csv", col_names = TRUE)
players_21$short_name
library(readr)
fdata_21 <- read_csv("players_21.csv")
library(readr)
fdata_21 <- read_csv("players_21.csv")
View(fdata_21)
head(fdata_21)
library(readr)
fdata_22 <- read_csv("players_22.csv")
View(fdata_22)
head(fdata_22)
head(fdata_21)
library(readr)
library(dplyr)
library(DT)
---
title: "Proyecto#2"
setwd("D:/Proyecto_Progra/Programacion1/Proyecto2/R")
---
title: "Proyecto#2"
---
title: "Proyecto#2"
library(readr)
---
title: "Proyecto#2"
---
title: "Atletas"
library(readr)
library(dplyr)
mi_data <- read_csv("players_21.csv", col_names = TRUE)
fdata_21 <- read_csv("players_21.csv", col_names = TRUE)
fdata_21 <- read_csv("players_21.csv", col_names = TRUE)
fdata_22<-read_csv("players_22.csv", col_names = TRUE)
table_dt <- datatable(
fdata_22,
options = list(
pageLength = 5,   # Número de filas por página
autoWidth = TRUE,  # Ajusta automáticamente el ancho de las columnas
searching = TRUE,  # Activa la búsqueda en la tabla
order = list(list(2, 'desc')) # Ordena inicialmente por la columna "Cantidad"
),
caption = 'Tabla interactiva: Inventario de Productos'
)
View(table_dt)
table_dt
library(DT)
library(DT)
#Dataset original jugadores de fifa21
origi_data21 <- read_csv("players_21.csv", col_names = TRUE)
#Dataset original jugadores de fifa21
origi_data21 <- read_csv("players_21.csv", col_names = TRUE)
#Dataset original jugadores de fifa22
origi_data22<-read_csv("players_22.csv", col_names = TRUE)
#Dataset original jugadores de fifa21
origi_data21 <- read_csv("players_21.csv", col_names = TRUE)
#Dataset original jugadores de fifa22
origi_data22<-read_csv("players_22.csv", col_names = TRUE)
View(origi_data21)
fdata_21<-origi_data21[,"short_name","player_positions","overall","potential","value_eur","age", "club_name", "league_name", "nationality_name", "preferred_foot", "pace", "shooting", "passing", "dribbling", "defending", "physic"]
fdata_21<-origi_data21[,c("short_name","player_positions","overall","potential","value_eur","age", "club_name", "league_name", "nationality_name", "preferred_foot", "pace", "shooting", "passing", "dribbling", "defending", "physic")]
View(fdata_21)
fdata_22<-origi_data22[,c("short_name","player_positions","overall","potential","value_eur","age", "club_name", "league_name", "nationality_name", "preferred_foot", "pace", "shooting", "passing", "dribbling", "defending", "physic")]
mi_data <- read_csv("players_21.csv", col_names = TRUE)
names(mi_data)
str(mi_data)
glimpse(mi_data)
dim(fdata_21)
dim(fdata_22)
